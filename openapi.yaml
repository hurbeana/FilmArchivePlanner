openapi: 3.0.1
info:
  title: FilmArchivePlanner (FAP)
  description: 'REST API for the FAP backend.'
  version: 0.1.0
externalDocs:
  description: Git repository
  url: https://reset.inso.tuwien.ac.at/repo/2021ws-ase-pr-group/21ws-ase-pr-qse-04
servers:
  - url: http://localhost:3000
tags:
  - name: contacts
    description: Endpoints for contact operations
  - name: directors
    description: Endpoints for director/directress operations
  - name: events
    description: Endpoints for event operations TODO
  - name: movies
    description: Endpoints for movie operations
  - name: plans
    description: Endpoints for plan operations TODO
  - name: tags
    description: Endpoints for tag operations
  - name: users
    description: Endpoints for user operations TODO
paths:
  /movies:
    get:
      tags:
        - movies
      summary: Get all movies
      description: Get all movies from the archive. Query parameters can be used to return only certain movies.
      operationId: getMovies
      parameters:
        - in: query
          name: searchMoviePagingDto
          schema:
            $ref: '#/components/schemas/SearchMoviePagingDto'
          description: All properties of searchMoviePagingDto are valid parameters see specifaction for details. The searchstring parameter disables all detailed field search parameters.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
    post:
      tags:
        - movies
      summary: Add new movie
      description: Adds a new movie to the archive
      operationId: addMovie
      requestBody:
        description: Movie object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateMovieDto'
        required: true
      responses:
        201:
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
      x-codegen-request-body-name: body
  /movies/{id}:
    get:
      tags:
        - movies
      summary: Get movie
      description: Returns a single movie with the specified ID
      operationId: getMovieById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDto'
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Movie not found
          content: { }
    put:
      tags:
        - movies
      summary: Update movie
      description: Updates the movie with the specified ID
      operationId: updateMovie
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateMovieDto'
      responses:
        204:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Movie not found
          content: { }
    delete:
      tags:
        - movies
      summary: Delete movie
      description: Deletes the movie with the specified ID
      operationId: deleteMovie
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Movie not found
          content: { }
  /directors:
    get:
      tags:
        - directors
      summary: Get all directors
      description: Get all directors from the archive. Query parameters can be used to return only certain directors.
      operationId: getDirectors
      parameters:
        - in: query
          name: searchDirectorPagingDto
          schema:
            $ref: '#/components/schemas/SearchDirectorPagingDto'
          description: All properties of searchDirectorPagingDto are valid parameters see specifaction for details. The searchstring parameter disables all detailed field search parameters.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectorDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
    post:
      tags:
        - directors
      summary: Add new director
      description: Adds a new director to the archive
      operationId: addDirector
      requestBody:
        description: Director object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateDirectorDto'
        required: true
      responses:
        201:
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
      x-codegen-request-body-name: body
  /directors/{id}:
    get:
      tags:
        - directors
      summary: Get director
      description: Returns a single director with the specified ID
      operationId: getDirectorById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDto'
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }
    put:
      tags:
        - directors
      summary: Update director
      description: Updates the director with the specified ID
      operationId: updateDirector
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateDirectorDto'
      responses:
        204:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
            description: Not found
            content: { }
    delete:
      tags:
        - directors
      summary: Delete director
      description: Deletes the director with the specified ID
      operationId: deleteDirector
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }
  /contacts:
    get:
      tags:
        - contacts
      summary: Get all contacts
      description: Get all contacts from the archive. Query parameters can be used to return only certain contacts.
      operationId: getContacts
      parameters:
        - in: query
          name: searchContactPagingDto
          schema:
            $ref: '#/components/schemas/SearchContactPagingDto'
          description: All properties of searchContactPagingDto are valid parameters see specifaction for details. The searchstring parameter disables all detailed field search parameters.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
    post:
      tags:
        - contacts
      summary: Add new contact
      description: Adds a new contact to the archive
      operationId: addContact
      requestBody:
        description: Contact object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateContactDto'
        required: true
      responses:
        201:
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
      x-codegen-request-body-name: body
  /contacts/{id}:
    get:
      tags:
        - contacts
      summary: Get contact
      description: Returns a single contact with the specified ID
      operationId: getContactById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }
    put:
      tags:
        - contacts
      summary: Update contact
      description: Updates the contact with the specified ID
      operationId: updateContact
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateContactDto'
      responses:
        204:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }
    delete:
      tags:
        - contacts
      summary: Delete contact
      description: Deletes the contact with the specified ID
      operationId: deleteContact
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }

  /tags:
    get:
      tags:
        - tags
      summary: Get all tags
      description: Get all tags from the archive. Query parameters can be used to return only certain tags.
      operationId: getTags
      parameters:
        - in: query
          name: searchTagPagingDto
          schema:
            $ref: '#/components/schemas/SearchTagPagingDto'
          description: All properties of searchTagPagingDto are valid parameters see specifaction for details. The searchstring parameter disables all detailed field search parameters.
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
    post:
      tags:
        - tags
      summary: Add new tag
      description: Adds a new tag to the archive
      operationId: addTag
      requestBody:
        description: Tag object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateTagDto'
        required: true
      responses:
        201:
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
      x-codegen-request-body-name: body
  /tags/{id}:
    get:
      tags:
        - tags
      summary: Get tag
      description: Returns a single tag with the specified ID
      operationId: getTagById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDto'
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }
    put:
      tags:
        - tags
      summary: Update tag
      description: Updates the tag with the specified ID
      operationId: updateTag
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateTagDto'
      responses:
        204:
          description: Operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }
    delete:
      tags:
        - tags
      summary: Delete tag
      description: Deletes the tag with the specified ID
      operationId: deleteTag
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Not found
          content: { }

components:
  parameters:
    Id:
      name: id
      in: path
      description: ID of entity to return
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    DatabaseEntrySchema:
      properties:
        id:
          type: integer
          format: int64
        created_at:
          type: string
        last_updated:
          type: string
    PagingSchema:
      properties:
        page:
          description: Used for pagination. The number of the page to return.
          type: integer
        limit:
          description: Used for pagination. The number of items to return.
          type: integer
        sortOrder:
          description: Used for pagination. The number of items to return.
          type: string
        orderBy:
          description: Used for pagination. The number of items to return.
          type: string
        searchstring:
          description: Searches all string fields containing the searchstring and returns every match. If specified, detailed search fields are ignored.
          type: string

    MovieSchema:
      properties:
        originalTitle:
          type: string
        englishTitle:
          type: string
        movieFile:
          type: string # TODO change to file type
        previewFile:
          type: string # TODO change to file type
        trailerFile:
          type: string # TODO change to file type
        stillFiles:
          type: array
          items:
            type: string # TODO change to file type
        subtitleFiles:
          type: array
          items:
            type: string # TODO change to file type
        directors:
          type: array
          items:
            $ref: '#/components/schemas/DirectorReferenceDto'
        countriesOfProduction:
          type: array
          items:
            $ref: '#/components/schemas/TagReferenceDto'
        yearOfProduction:
          type: integer
          format: int32
        duration:
          type: integer
          format: int32
          description: Duration in minutes
        animationTechniques:
          type: array
          items:
            $ref: '#/components/schemas/TagReferenceDto'
        softwareUsed:
          type: array
          items:
            $ref: '#/components/schemas/TagReferenceDto'
        keywords:
          type: array
          items:
            $ref: '#/components/schemas/TagReferenceDto'
        germanSynopsis:
          type: string
        englishSynopsis:
          type: string
        submissionCategories:
          type: array
          items:
            $ref: '#/components/schemas/TagReferenceDto'
        hasDialog:
          type: boolean
        dialogLanguages:
          type: array
          items:
            $ref: '#/components/schemas/TagReferenceDto'
        hasSubtitles:
          type: boolean
        isStudentFilm:
          type: boolean
        filmSchool:
          type: string
        script:
          type: string
        animation:
          type: string
        editing:
          type: string
        sound:
          type: string
        music:
          type: string
        productionCompany:
          type: string
        contact:
          $ref: '#/components/schemas/ContactReferenceDto'
    DirectorSchema:
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        biographyEnglish:
          type: string
        biographyGerman:
          type: string
        filmography:
          type: string
    ContactSchema:
      properties:
        type:
          $ref: '#/components/schemas/TagReferenceDto'
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        website:
          type: string
    TagSchema:
      properties:
        type:
          type: string
        value:
          type: string
        user:
          type: string # TODO change to user type
        public:
          type: boolean

    CreateUpdateMovieDto:
      type: object
      required:
        - originalTitle
        - englishTitle
        - movieFile
        - stillFiles
        - directors
        - duration
        - germanSynopsis
        - englishSynopsis
        - submissionCategories
        - isStudentFilm
        - contact
      allOf:
        - $ref: '#/components/schemas/MovieSchema'
    MovieDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/DatabaseEntrySchema'
        - $ref: '#/components/schemas/CreateUpdateMovieDto'
    SearchMoviePagingDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/PagingSchema'
        - $ref: '#/components/schemas/MovieSchema'

    CreateUpdateDirectorDto:
      type: object
      required:
        - firstName
        - lastName
        - biographyEnglish
      allOf:
        - $ref: '#/components/schemas/DirectorSchema'
    DirectorDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/DatabaseEntrySchema'
        - $ref: '#/components/schemas/CreateUpdateDirectorDto'
    SearchDirectorPagingDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/PagingSchema'
        - $ref: '#/components/schemas/DirectorSchema'
    DirectorReferenceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
          description: First name + last name of the director

    CreateUpdateContactDto:
      type: object
      required:
        - type
        - name
      allOf:
        - $ref: '#/components/schemas/ContactSchema'
    ContactDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/DatabaseEntrySchema'
        - $ref: '#/components/schemas/CreateUpdateContactDto'
    SearchContactPagingDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/PagingSchema'
        - $ref: '#/components/schemas/ContactSchema'
    ContactReferenceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Name of the contact

    CreateUpdateTagDto:
      type: object
      required:
        - type
        - name
      allOf:
        - $ref: '#/components/schemas/TagSchema'
    TagDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/DatabaseEntrySchema'
        - $ref: '#/components/schemas/CreateUpdateTagDto'
    SearchTagPagingDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/PagingSchema'
        - $ref: '#/components/schemas/TagSchema'
    TagReferenceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
        type:
          type: string

