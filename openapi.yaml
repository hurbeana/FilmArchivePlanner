openapi: 3.0.1
info:
  title: FilmArchivePlanner (FAP)
  description: 'REST API for the FAP backend.'
  version: 0.1.0
externalDocs:
  description: Git repository
  url: https://reset.inso.tuwien.ac.at/repo/2021ws-ase-pr-group/21ws-ase-pr-qse-04
servers:
  - url: http://localhost:3000/api/v1
tags:
  - name: contacts
    description: Endpoints for contact operations TODO
  - name: directors
    description: Endpoints for director/directress operations TODO
  - name: events
    description: Endpoints for event operations TODO
  - name: movies
    description: Endpoints for movie operations
  - name: plans
    description: Endpoints for plan operations TODO
  - name: tags
    description: Endpoints for tag operations TODO
  - name: users
    description: Endpoints for user operations TODO
paths:
  /movies:
    get:
      tags:
        - movies
      summary: Get all movies
      description: Get all movies from the archive. Query parameters can be used to return only certain movies.
      operationId: getMovies
      parameters: # TODO Define search parameters
        - in: query
          name: offset
          description: Used for pagination. The number of items to skip before starting to collect the result set.
          schema:
            type: integer
        - in: query
          name: limit
          description: Used for pagination. The number of items to return.
          schema:
            type: integer
        - in: query
          name: originalTitle
          schema:
            type: string
        - in: query
          name: englishTitle
          schema:
            type: string
        - in: query
          name: duration
          schema:
            type: integer
            format: int32
        - in: query
          name: hasDialog
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieDto'
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
    post:
      tags:
        - movies
      summary: Add new movie
      description: Adds a new movie to the archive
      operationId: addMovie
      requestBody:
        description: Movie object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateMovieDto'
        required: true
      responses:
        201:
          description: Successful creation
          content: { }
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
      x-codegen-request-body-name: body
  /movies/{id}:
    get:
      tags:
        - movies
      summary: Get movie
      description: Returns a single movie with the specified ID
      operationId: getMovieById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDto'
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Movie not found
          content: { }
    put:
      tags:
        - movies
      summary: Update movie
      description: Updates the movie with the specified ID
      operationId: updateMovie
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateMovieDto'
      responses:
        204:
          description: Operation successful
          content: { }
        400:
          description: Invalid input
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Movie not found
          content: { }
    delete:
      tags:
        - movies
      summary: Delete movie
      description: Deletes the movie with the specified ID
      operationId: deleteMovie
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        401:
          description: Unauthorized
          content: { }
        403:
          description: Missing permission
          content: { }
        404:
          description: Movie not found
          content: { }
components:
  parameters:
    Id:
      name: id
      in: path
      description: ID of movie to return
      required: true
      schema:
        type: integer
        format: int64
  schemas:
    MovieDto:
      required:
        - id
      allOf:
        - properties:
            id:
              type: integer
              format: int64
        - $ref: '#/components/schemas/CreateUpdateMovieDto'
    CreateUpdateMovieDto:
      required:
        - originalTitle
        - englishTitle
        - movieFile
        - stillFiles
        - directors
        - duration
        - germanSynopsis
        - englishSynopsis
        - submissionCategory
        - isStudentFilm
        - contact
      type: object
      properties:
        originalTitle:
          type: string
        englishTitle:
          type: string
        movieFile:
          type: string
        previewFile:
          type: string
        trailerFile:
          type: string
        stillFiles:
          type: array
          items:
            type: string
        subtitleFiles:
          type: array
          items:
            type: string
        directors:
          type: array
          items:
            type: string # TODO change to director type
        countriesOfProduction:
          type: array
          items:
            type: string # TODO change to tag type
        yearOfProduction:
          type: integer
          format: int32
        duration:
          type: integer
          format: int32
          description: Duration in minutes
        animationTechniques:
          type: array
          items:
            type: string # TODO change to tag type
        softwareUsed:
          type: array
          items:
            type: string # TODO change to tag type
        keywords:
          type: array
          items:
            type: string # TODO change to tag type
        germanSynopsis:
          type: string
        englishSynopsis:
          type: string
        submissionCategory:
          type: string # TODO change to tag type
        hasDialog:
          type: boolean
        dialogLanguages:
          type: array
          items:
            type: string # TODO change to tag type
        hasSubtitles:
          type: boolean
        isStudentFilm:
          type: boolean
        filmSchool:
          type: string
        script:
          type: string
        animation:
          type: string
        editing:
          type: string
        sound:
          type: string
        music:
          type: string
        productionCompany:
          type: string
        contact:
          type: string # TODO change to contact type
